/**
 * @file
 * Misc helpers and shortcuts
 */

/*
 * CSS3 Box-sizing.
 *
 * @see: http://caniuse.com/#feat=css3-boxsizing
 * @see: http://www.w3.org/TR/css3-ui/#box-sizing
 */
@mixin box-sizing($type: border-box) {
  -moz-box-sizing: $type;
  -webkit-box-sizing: $type;
  box-sizing: $type;
}

/*
 * CSS3 Transitions.
 *
 * @see: http://caniuse.com/#feat=css-transitions
 * @see: http://www.w3.org/TR/css3-transitions/
 */
@mixin transition($property, $duration: 600ms, $func: ease-in-out) {
  transition-property: $property;
  transition-duration: $duration;
  transition-timing-function: $func;
}

/*
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    contenteditable attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that are clearfixed.
 * 2. The use of 'table' rather than 'block' is only necessary if using
 *    ':before' to contain the top-margins of child elements.
 *
 * @see: http://www.paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither
 * @see: http://nicolasgallagher.com/micro-clearfix-hack
 * @see: http://www.satzansatz.de/cssd/onhavinglayout.html
 * @see: http://quirksmode.org/css/css2/display.html
 */
@mixin clearfix-mixin() {
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }
  &:after {
    clear: both;
  }
}

/*
 * Hide elements visually, but keep them available for screen-readers.
 *
 * Used for information required for screen-reader users to understand and use
 * the site where visual display is undesirable. Information provided in this
 * manner should be kept concise, to avoid unnecessary burden on the user.
 */
@mixin visually-hidden() {
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  &.focusable:active,
  &.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}

/*
 * Apply single color to anchor tags.
 */
@mixin link-color($normal_color, $hover_color: '', $active_color: '', $visited_color: '') {
  @if (type_of($hover_color) != color) {
    @if (lightness($normal_color) > 50) {
      $hover_color: darken($normal_color, 10);
    } @else {
      $hover_color: lighten($normal_color, 10);
    }
  }
  @if (type_of($active_color) != color) {
    @if (lightness($normal_color) > 50) {
      $active_color: darken($normal_color, 12);
    } @else {
      $active_color: lighten($normal_color, 12);
    }
  }
  @if (type_of($visited_color) != color) {
    @if (lightness($active_color) > 50) {
      $visited_color: darken($normal_color, 6);
    } @else {
      $visited_color: lighten($normal_color, 6);
    }
  }

  // Style links that have not been visited.
  color: $normal_color;
  &:link {
    color: $normal_color;
  }

  // Style links that are active.
  &.active,
  &:active {
    color: $active_color;
  }

  // Style links that have been visited.
  &:visited {
    color: $visited_color;
  }

  // Style link hover and focus states.
  &:focus,
  &:hover {
    color: $hover_color;
  }
}

// Hides text inside a tag, useful for replacing text with images.
@mixin hide-text($type: block, $size: 1em) {
  display: $type;
  height: 0;
  overflow: hidden;
  padding-top: $size;
  width: $size;
}

/**
 * The can be use to class extends the .element-invisible class to allow the
 * element to be show. E.g.: When the element is focused using the keyboard.
 */
@mixin display-invisible-element() {
  clip: auto;
  height: auto;
  overflow: visible;
  position: static !important;
}

/**
 *  Using media queries with like this:
 *  @include media-query($bp_small, $bp_medium) {
 *    .wrapper {
 *      padding-right: $spacing-unit / 2;
 *      padding-left: $spacing-unit / 2;
 *    }
 *  }
 *
 *  OR
 *  @include media-query-min($bp_medium) {
 *    .wrapper {
 *      padding-right: $spacing-unit / 2;
 *      padding-left: $spacing-unit / 2;
 *    }
 *  }
 *
 *  OR
 *  @include media-query-max($bp_medium) {
 *    .wrapper {
 *      padding-right: $spacing-unit / 2;
 *      padding-left: $spacing-unit / 2;
 *    }
 *  }
 */
@mixin media-query-min($min) {
  @media (min-width: $min) {
    @content;
  }
}

@mixin media-query-max($max) {
  @media (max-width: $max) {
    @content;
  }
}

@mixin media-query($min, $max) {
  @media (min-width: $min) and (max-width: $max) {
    @content;
  }
}

/**
 * Responsive design behaviour.
 *
 * @TODO: Add documentation.
 */
@mixin l-row-wrapper($count: $gen_total_columns) {
  margin: 0 auto;
  width: ($gen_column_width + $gen_gutter_width) * $count;
}

@mixin l-row-separator() {
  margin-bottom: $gen_gutter_width;
}

@mixin l-column($count) {
  display: inline;
  float: left;
  margin-left: $gen_gutter_width / 2;
  margin-right: $gen_gutter_width / 2;
  position: relative;
  width: ($gen_column_width + $gen_gutter_width) * $count - $gen_gutter_width;
}

// NOTE: When you use this mixin, the wrapper element needs to have:
//       `display: table;`
@mixin l-column-cell($count) {
  display: table-cell;
  padding-left: $gen_gutter_width / 2;
  padding-right: $gen_gutter_width / 2;
  width: ($gen_column_width + $gen_gutter_width) * $count - $gen_gutter_width;
}

@mixin l-column-single() {
  margin-left: $gen_gutter_width / 2;
  margin-right: $gen_gutter_width / 2;
}

// Style for nested columns.
@mixin l-first-column() {
  margin-left: 0;
}
@mixin l-last-column() {
  margin-right: 0;
}

@mixin l-fix-nesting() {
  &:first-child {
    @include l-first-column();
  }
  &:last-child {
    @include l-last-column();
  }
}

// Set fixed height to columns.
@mixin l-column-force-height($line_height, $rows, $color: '') {
  line-height: $line_height;
  height: $line_height * $rows;
  overflow: hidden;

  // Fix overflowing text cropping style.
  @if type-of($color) == color {
    position: relative;
    &:after {
      background: linear-gradient(to bottom, rgba($color, 0.01) 0%, $color 100%);
      content: ' ';
      height: 1em;
      width: 100%;
      position: absolute;
      bottom: 0;
    }
  }
}

// Adds a background image to a page section.
@mixin l-background-image($image_path, $fallback, $gradient) {
  @include _lbi_helper($fallback, $gradient);

  background: url($image_path);
  background-position: center center;
  background-size: cover;
}
@mixin _lbi_helper($fallback, $gradient...) {
  position: relative;
  background-repeat: no-repeat;

  &:after {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: $fallback; // @TODO: Make things look decent on older browsers.
    background: $gradient;
    content: "";
    z-index: 1;
  }

  & > .page-layout-element {
    position: relative;
    z-index: 2;
  }
}

// Add function that can cast a strings to a number.
// http://hugogiraudel.com/2014/01/15/sass-string-to-number/
@function _string_length($number, $unit) {
  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
  $index: index($strings, $unit);

  @if not $index {
    @warn "Unknown unit `#{$unit}`.";
    @return false;
  }

  @return $number * nth($units, $index);
}
@function string_to_number($string) {
  // Matrices
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers:  0   1   2   3   4   5   6   7   8   9;

  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);


    @if $character == '-' {
      $minus: true;
    }

    @else if $character == '.' {
      $divider: 1;
    }

    @else {
      @if not $index {
        $result: if($minus, $result * -1, $result);
        @return _string_length($result, str-slice($string, $i));
      }

      $number: nth($numbers, $index);

      @if $divider == 0 {
        $result: $result * 10;
      }

      @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }

      $result: $result + $number;
    }
  }

  @return if($minus, $result * -1, $result);
}
